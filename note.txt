proxy server: outbound
firewall : inbound
oracle 사용시 비예약어는 case-sensitive
mariadb x case-sensitive

docker ps -a docker ps
db server: 물리적으로 컴퓨터 1대 이상
db서버에서는 db작업x , 접속프로그램 사용
-접속프로그램
-api서버 이용해 사용자가 일반적으로 사용
-오픈api: 개발자가 api 사용하게 해줌
utf8-mb4: 이모지
ddl: select
dml:
dcl: grant, revoke (operator, cloud engineer)
commit, rollback, savepoint (개발자)

관리기능 (operator)

mysql: root가 db 생성
oracle: user가 db 생성

db생성
create database 이름;

db 사용
use 이름;

null: 가르키는게 없다
undefined: 정의되지 않음

5 select : 열단위추출
1 from
2 where : 테이블에 조건 적용해 행단위 추출
3 group by : where 절 결과 그룹화
4 having : 그룹화 이후 행단위 추출
6 order by : 정렬
7 limit : 추출하고자 하는 데이터의 행 설정

distinct, group by

and 사용 시 더 적은 행이 앞에
or 은 더 많은행이 앞에

LIKE 
%: 글자수상관X
_: 1글자

BETWEEN
a between b (a<=x<=b)

IN

집계함수는 그룹화 한 이후에 사용이 가능
집계함수는 NULL 데이터는 제외하고 연산
count(AGE): 2
count(*): 모든 컬럼이 NULL인 경우 제외
표준 SQL에서는 GROUP BY를 사용하는 경우 SELECT 절에는 GROUP BY에 사용한 컬럼과 집계함수를 이용한 데이터만 기재가능
mysql/mariadb는 GROUP BY 이외의 컬럼을 SELECT에 사용가능, 첫번째 데이터가 출력 

having 은 group by 다음

SUBQUERY
다른 쿼리 안의 쿼리
한번만 실행
( ) 로 감싸야
WHERE, FROM(Inline View), INSERT, DELETE, UPDATE절에 사용가능
단일행 서브쿼리(반드시 1개행 리턴)와 다중행 서브쿼리(2개 이상 행 리턴)로 분류
다중행 서브쿼리는 단일행 연산자(=, <>, >, <, >=, <=) 사용불가
다중 행 서브 쿼리는 IN, ANY, ALL, EXIST 같은 다중 행 연산자 사용

SELECT 절에서 출력해야 하는 컬럼이나 연산식이 2개 이상의 테이블의 컬럼을 이용하는 경우 서브쿼리 사용 불가

테이블을 합쳐서 조회
수직적으로 합치기 :  SET
테이블의 구조는 다르지만 동일한 의미 갖는 컬럼 존재해 이 컬럼 기준으로 수평 합치기 : JOIN

JOIN 종류:
cartesian product : 조인 조건 없이 from 절에 테이블 이름 두개 이상 기재한 경우
equi join : =연산자 사용
non equi join : =이외 연산자 사용 컬럼 비교 시
inner join : equi join과 동일, 양쪽 테이블 모두에 존재하는 데이터만 결합
outer join : 한쪽 테이블에만 존재하는 데이터도 결합(left, right, full)
self join : 동일한 테이블 조인, 테이블 이름 수정 필요, 하나의 테이블에 동일한 컬럼이 2개 이상 존재하는 경우 사용
natural join : 조인 조건에 해당하는 컬럼의 이름이 같은 경우 생략
ansi join: cross join, cartesian product, from 테이블이름 cross join 테이블이름
조인 조건에서 컬럼이름이 동일한 경우는 on 대신 using이라고 쓰고 조인이름만 기술하는 것도 가능

이 경우 조인 조건을 생략하고 inner 대신에 natural을 붙여도 됩니다.. 이경우에는 조인에 참여하는 컬럼이 한번만 출력됩니다.
select ename, dname, loc from emp inner join dept on emp.deptno=dept.deptno;
select ename, dname, loc from emp inner join dept using (deptno);
select ename, dname, loc from emp natural join dept;

08/28
프로세스: 독자적 실행 가능
스레드: 독자적 존재 불가
튜플, row, record, 행 (행과 행이 구별이 되야)
attribute - column, field,  속성, 열
카디널리티: 행의개수, 두개의테이블에서: 서로 대응되는 수

논리적모델: 물리적모델과 개념적모델중간, 개발자와 사용자 둘다 이해 가능
개념적모델: 사용자가 이해가능

정규화
함수적 종속: 어떤 컬럼으로 다른컬럼을 특정할 수 있는 것
부분함수적종속: 기본키가 두개 이상의 컬럼으로 구성된 경우 어느 하나만으로 다른컬럼을 구분해 낼 때
이행적함수적종속: A가 B 종속하고 B가 C 종속 시 A가 C 종속
shared lock, exclusive lock

복원/복구
-로그기록: 작업내역 기록 (부분적 복구 가능) 복원느림
-스냅샷기록: 값을 기록, 여러값 기억 필요, 부분 복구 느림 ex)통장 

CHAR: char(10)일 때 5글자 할당 시 나머지 5칸 그대로 유지 ex)자주 바뀌는 변수
VARCHAR:  varchar(10)일때 5글자 할당 시 나머지 5글자 반납, 비효율적, 5글자로 줄었을 때 수정 시 다시 할당해야 -> row migration 가능성
ex) 자주 바꾸지 않는 변수, ID, 휴대폰번호
char 불러올 때 trim 필요

blob, text는 인덱스 설정 불가
배열 만들 시 비교 가능한 원소

table구조변경: ALTER

컬럼추가
ALTER TABLE 테이블이름 ADD 컬럼이름 자료형 제약조건;

컬럼삭제
ALTER TABLE 테이블이름 DROP 컬럼이름;

컬럼의 이름과 자료형 변경
ALTER TABLE 테이블이름 CHANGE 컬럼이름 새로운컬럼이름 자료형;

컬럼의 자료형 변경
ALTER TABLE 테이블이름 MODIFY 컬럼이름 자료형;

컬럼의 위치 변경
ALTER TABLE 테이블이름 MODIFY COLUMN 컬럼이름 자료형 FIRST(AFTER 다른컬럼이름);

테이블 이름 수정
ALTER TABLE 기존테이블이름 rename 새로운이름;

확인: 테이블의 구조를 확인하는 desc 명령

contact 테이블에 age 칼럼을 정수로 추가
alter table contact add age int;

테이블 삭제: DROP TABLE 테이블이름;

테이블의 데이터삭제: TRUNCATE TABLE 테이블이름;
테이블의 구조는 남음

테이블을 삭제할 때는 문법에 맞게 작성하고 테이블이 존재해도 실패하는 경우.
외래키가 설정된 테이블을 삭제할 때 외래키 옵션이 없는 경우
이런 경우에는 부모테이블을 삭제하고 자식 테이블을 삭제
외래키를 설정할 때 되도록이면 삭제에 관련된 옵션은 설정을 하는 것이 좋음

테이블을 압축해서 생성
CREATE TABLE을 수행할 때 마지막에 ROW_FORMAT=COMPRESSED 옵션을 추가

제약조건 설정
1. 종류: NOT NULL 필수입력 
UNIQUE: 중복된 값X
PRIMARY KEY: NOT NULL하고 UNIQUE인데 테이블에 1개만 설정 가능
CHECK제약 조건: 값의 범위나 종류를 설정
FOREIGN KEY: 외래키 설정

제약조건은 아니지만 컬럼을 설정할 때 사용할 수 있는 옵션
DEFAULT : 기본값 설정
AUTO_INCREMENT: 1번만 설정가능

DB에서 NULL이 가능한 경우 1바이트를 추가 할당해서 NULL여부 표현
name char(10) -> 11바이트
name char(10) NOT NULL

ASCII코드0이 NULL

컬럼제약조건과 테이블제약조건
컬럼제약조건은 컬럼을 만들 때 제약 조건을 설정하는 것이고
테이블 제약 조건은 컬럼을 만들어두고 제약 조건을 설정하는 것

컬럼이름 자료형 [constraint 이름] 제약조건

...
[constraint 이름] 제약조건(컬럼이름)

NOT NULL은 컬럼 제약조건으로만 가능

08/29
DML: 데이터 조작 언어
예전에는 SELECT를포함시켰는데 최근에는 DQL로 분리

1.데이터 삽입 - INSERT
기본 형식
INSERT INTO 테이블이름(필드목록) VALUES(데이터나열)
INTO는 생략가능
필드목록을 생략할 수 있는데 이 경우에는 테이블을 만들 때 작성한 순서대로 모든 필드의 값을 대입해야

INSERT, DELETE, UPDATE만을 DML로 분류

mariadb 는 ""사용해도 삽입가능, DATE입력 시 ' '로 사용해도 삽입 가능

여러개의 데이터를 한꺼번에 삽입: DBMS 종류에 따라 허용하지 않는 경우도 있음

INSERT INTO 테이블이름(필드목록) VALUES
(데이터나열)
(데이터나열)
(데이터나열)

조회문장을 이용해서 데이터를 삽입
INSERT INTO 테이블이름(필드목록) SELECT 구문;

데이터 복사도 가능하고 구조 복사도 가능

SQL Injection공격 조심 X or 1=1

스크립트를 이용해 데이터 삽입 시 중간에 에러가 발생해도 데이터 삽입하고자 하는 경우는 INSERT 다음에 IGNORE 추가해주면 됨

CREATE TABLE espa(
userid varchar(20) primary key,
name varchar(20)
);

-- ignore 추가시 스크립트로 실행 시 중간에 에러나도 계속 수행
INSERT ignore INTO espa values('karina', '카리나');
INSERT ignore INTO espa values('winter', '윈터');
INSERT ignore INTO espa values('winter', '윈터');
INSERT ignore INTO espa values('aeri', '지젤');

여러 개의 구문을 실행할 때 별개의 스레드로 실행하는 것을 고려, 수행 중 실패해도 계속 수행하게 하기위해

데이터 삭제 - DELETE
기본 형식
DELETE FROM 테이블이름 [WHERE 조건];

FROM을 생략해도 삭제가 되는 경우가 있음
문법에 맞게 작성을 하더라도 실패하는 경우가 있는데 이 경우는 외래키 설정을 확인
WHERE 절이 없으면 테이블의 모든 데이터가 삭제
실무에서 사용할 때는 DELETE에 트리거를 걸어 DELETE가 발생할 때 다른 테이블에 데이터를 옮기거나 삭제가 되었다는 표시만 하기도 함

데이터수정 - UPDATE
기본형식
UPDATE 테이블이름
SET 수정할내용
[WHERE 조건];

WHERE 절이 없으면 모든 데이터가 수정됨
결과를 확인할 때는 성공 여부보다는 영향받은 행의 개수를 확인하는 것이 좋음

transaction
한번에 수행되어야하는 논리적인 작업의 단위
관계형 데이터베이스에서는 하나의 SQL 문장이 물리적인 단위

1 특성
Atomicity - 트랜잭션은 ALL or NOTHING의 형태로 수행되어야. 부분적으로 수행되면 안됨
Consistency - 트랜잭션의 수행 결과는 일관성이 있어야 한다
Isolation - 트랜잭션은 다른 트랜잭션과 분리되서 실행되어야 한다
Durability - 한 번 완료된 트랜잭션은 계속되어야 한다.( 바꾸기 안됨)

2 임시 작업 영역
데이터베이스 작업은 원본에 직접 하는 것이 아니고 복사본을 만든 후 복사본에 작업을 수행하고 이 후에 원본에 적용
이러한 복사본이 임시 작업 영역
임시 작업 영역을 Undo Segment나 Rollback Segment라고 함

3 트랜잭션 관련 명령어
COMMIT, ROLLBACK, SAVEPOINT

4 기타
트랜잭션은 DML문장이나 DCL 문장이 처음 성공할 때 생성
트랜잭션 소멸 시점은 COMMIT이나 ROLLBACK 될 때
COMMIT은 임시 작업 영역에 수행한 내용을 원본에 반영하는 것, ROLLBACK은 임시작업영역의 데이터를 삭제하는 것
특정 시점으로 돌아가려면 SAVEPOINT를 이용해서 시점을 만들어 줘야함
SAVEPOINT가 없으면 임시 작업 영역의 데이터는 버려짐

COMMIT 되는 경우
-DDL이나 DLC 명령문을 성공하는 경우
-명시적으로 COMMIT명령을 수행하는 경우
-데이터베이스 서버나 접속 프로그램을 정상적으로 종료한 경우
-접속 프로그램이나 데이터베이스 설정을 auto commit으로 하는 경우 SQL 문장이 성공적으로 수행되면 자동으로 COMMIT
Java는 기본적으로 auto commit

ROLLBACK되는경우
-명시적으로 ROLLBACK명령을 수행하는 경우
-비정상적인 종료

SAVEPOINT를 만들고자 하는 경우 SAVEPOINT 이름
특정 SAVEPOINT로 롤백하고자 하는 경우는 ROLLBACK TO 이름

VIEW
1 INLINE VIEW
FROM 절에 사용한 서브쿼리를 이용해 만들어진 테이블
INLINE VIEW는 이름이 없기 때문에 반드시 이름을 설정해 주어야 함.

2 VIEW
물리적인 테이블에 근거하는 가상 테이블
사용하는 자체는 테이블과 동일하지만 실제로 존재하지 않음
기본 테이블이나 다른 뷰로부터 SELECT 구문을 이용해서 생성
SQL 문장을 메모리에 저장해두었다가 VIEW를 사용할 때 수행해서 테이블처럼 사용

목적
-실행속도 향상
-보안이 우수

주의
-VIEW에 DML 작업가능(제한적으로)
-VIEW에 DML 작업을 수행하면 원본 테이블에 작업을 수행

생성 방법
CREATE VIEW AS SELECT 구문 옵션
옵션: WITH CHECK OPTION과 READ ONLY
VIEW는 수정불가, ALTER VIEW 명령은 없음
대부분의 상용 데이터베이스에서 CREATE 다음에 OR REPLACE를 추가해서 존재하는 경우 다시 만들도록 해주는 기능을 제공

3. 임시 테이블
-테이블을 만들 때 CREATE 다음에 TEMPORARY를 추가하면 임시 테이블로 생성
-사용법은 일반 테이블과 동일
-세션 내에서만 동작
-세션이 닫히면 자동으로 삭제, 임시 테이블은 생성한 클라이언트에서만 접근 가능
-기존 테이블과 동일한 이름으로 만들 수있는데 이렇게 하면 기존 테이블은 그대로 두고 임시테이블이 만들어짐. 임시 테이블 제거 전까지는 원본 테이블 사용 불가
create temporary table T2(name varchar(20));

 저장 프로시져와 트리거
-저장 프로시저: 자주 사용하는 SQL구문을 하나의 이름으로 묶어두고 이름을 호출해서 SQL구문을 실행하도록 하는 것
프로그래밍 언어에서는 함수와 유사

트리거 삽입, 삭제, 갱신을 수행하기 전이나 수행 한 후에 다른 작업을 하도록 하기 위한 객체
특정 조건에 맞지 않으면 삽입이나 갱신을 하지 못하도록 하거나 삽입이나 삭제 작업을 할 때 다른 테이블에 작업을 수행하도록 하거나 로깅에 사용
시간을 설정해서 특정 시간에만 동작하도록 하는 것도 가능

프로그래밍 영역이어서 RDBMS마다 작성하는 방법이 다름
Oracle에서 이 작업을 하기 위한 문법은 PL/SQL이라고 부름
MS SQL Server에서는 T-SQL이라 부름

인덱스 생성
creare [or replace] [unique] index [if not exists] 인덱스이름 [인덱스종류]
ON 테이블이름(컬럼이름나열) 
[WAIT n|NOWAIT][인덱스옵션][알고리즘 및 락 옵션]
락옵션: 쉐어드락, exclusive lock(하나만 사용가능)

인덱스를 생성하는 경우
-테이블의 행의 개수가 많을 때
-where 절에 자주 사용되는 경우
-검색 결과가 2-4% 정도 되는 경우
-JOIN에 자주 사용되거나 NULL이 많은 경우

인덱스를 생성하지 않는 경우
-테이블 행 개수가 적을 때
-중복되는 데이터가 많을때
-where절에 잘 사용이 되지 않는 경우
-검색결과가 10% 이상인 경우
-DML 작업이 많은 경우

FULL TABLE SCAN-테이블들의 데이터를 전부 읽는 것
-SQL 문장에서 WHERE 절이 생략된 경우
-WHERE 절에 사용되는 컬럼에 INDEX가 만들어지지 않는 경우
-병렬로 처리하는 경우
-데이터베이스르 만들 때 전체 테이블 스캔을 하려고 힌트를 설정한 경

bin폴더에 실행 명령 파일 존재

백업이나 검색 결과를 내보내는 기능을 테스트할 때는 디렉토리가 만들어져 있어야 하고 쓰기 권한이 있어야 함
select * into outfile 'c:\\emp.dat' from `emp`;

백업
mysqldump -u root -p wnddkd --all-databases > ex.sql
복원
mysql -u root -p dbex < dbex.sql

08/30 MongoDB
UNIX(c/c++)-LINUX(c/c++)-android, GNOME
           -MACos(UNIX + GUI)-windows
primitive type: 직접값을 기억, 빠름 a=10 (C, Go가 지원)
blob: binray로 저장(16진수로 보여줌)
timestamp: 1970/1/1부터 지나온 시간
NoSQL에서는 배열의 원소 순서가 다르면 다른 값
락 걸리면 읽고쓰기 불가
맵리듀스
삽입삭제갱신-RDBMS, 조회-NoSQL(유연, 스타트업이 많이 사용)

프로그램 접속 시 두가지 필요: 도메인/IP주소(컴퓨터구별) + 포트번호(프로세스 구별)
mongodb에서 use ex하면 이름만 생성, 데이터 넣어야 db 공간 할당

mongodb 명령어
db->현재db확인
showdbs->db목록확인
use 이름->db 생성 및 전환
db.dropDatabase() 이름->현재 사용중 db 삭제
샘플 데이터 삽입: db.mycollection.insertOne({name:1})
mongodb에서는 db에 데이터가 존재해야 실제로 db 생성
collection
-RDBMS에서 테이블 또는 릴레이션에 해당
-테이블은 정규화된 데이터, 컬렉션은 비정규화된 데이터
-mongoDB에서는 JOIN을 지원하지 않음, 하나의 컬렉션에 최대한 많은 양의 데이터를 저장하는 것 권장
-성능측면에서는 하나의 컬렉션에 너무 많은 데이터 저장하게 되면 디스크 읽기 오퍼레이션이 많이 필요, 캐시 효율이 떨어지므로 여러개의 컬렉션을 생성
OS-Memory(주기억장치)-디스크(보조기억장치)
Cache Ratio: 캐시에 데이터 있을 확률
-컬렉션 직접 생성: db.createCollection("컬렉션이름")
-db 모든 컬렉션 조회: db.getCollectionNames() 또는 show collections
-컬렉션 제거: db.컬렉션이름.drop()
-이름 변경: db.컬렉션이름.renameCollection(이름)
-Capped Collection: 크기 초과 시 자동으로 가장 오래된 데이터를 삭제하고 데이터를 삽입
-로그 데이터나 일정 시간 동안만 보관하는 통계 데이터를 보관하고자 하는 경우에 유용

view
-조회만 가능한 db개체

capped collection 사용
-db.createCollection('cappedcollection', {capped:true, size:10000})
-db.cappedcollection.insertOne({x:1})
-db.cappedcollection.find()
-for문 사용가능 for(i=0;i<1000;i++){db.cappedcollection.insertOne({x:i})}

2 도큐먼트 생성 - 데이터 추가
-도큐먼트 레벨에서 원자적으로 실행
-데이터는 JSON 형식으로 표현
-데이터 삽입할 때 _id 라는 key 값을 설정하지 않으면, _id 라는 컬럼의 값으로 key를 생성해서 삽입을 해줌
-삽입하는함수로는 insert, save, insertOne, insertMany가 있음
-데이터를 삽입할 때 배열로 삽입하면 데이터를 분리해서 저장
JSON: 배열이 맨 밖에 있는 것 불가 {} 안에 위치
배열 사용시 순서 있지만 의미부여 X, 세세하게 알려줘야

db.num.insert([1,2,3])

db.num.find()

데이터를 삽입할 때 2번째 매개변수로 ordered 설정 가능, 이 값이 true이면 싱글스레드 이용, false이면 멀티 스레드 이용
여러 개의 데이터를 한꺼번에 삽입할 때 싱글 스레드를 사용하는 경우 에러가 발생하면 뒤의 데이터는 삽입되지 않음
멀티스레드를 사용하면 에러가 발생한 데이터만 삽입되지 않음

db.sample.createIndex({name:1}, {unique:true})

db.sample.insert({name:"park"})

db.sample.insert([{name:"kim"}, {name:"park"}, {name: "lee"}]) #싱글스레드일 때 위 경우 lee는 못들어감

db.sample.find()

db.sample.insert([{name:"lee"}, {name:"park"}, {name: "choi"}], {ordered:false}) #멀티스레드일 경우 choi가 삽입
db.sample.find()
멀티스레드 프로그래밍 할때 별도의 작업 할당
